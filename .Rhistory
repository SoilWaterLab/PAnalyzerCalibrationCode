}
}
pdata$myPppmFix[i]
pdata$myPppmFix[2]
pdata$myPppmFix[3]
as.numberic(pdata$myPppmFix[3])
as.numeric(pdata$myPppmFix[3])
dilutionFactor=10 #i.e. 10 for 10x, 100 for 100x
for (i in 1:dim(pdata)[1]){
if(pdata$myPppmFix[i]!="NA") {
pdata$myPppmFix[i]=as.numeric(pdata$myPppmFix[i])*dilutionFactor
}
}
View(pdata)
View(pdata)
write.table(pdata, "ptestNewData.txt", sep="\t")
setwd("C:\\Users\\Sheila\\Documents\\Cornell\\Research\\PhD!\\leaf_litter\\P_calibration_files")
setwd("C:\\Users\\Sheila\\Documents\\Cornell\\Research\\PhD!\\leaf_litter\\P_calibration_files")
#
# read in dataset 1
pdata1=read.table("pData.1.txt",header=T)
#
# read in dataset 2
pdata1=read.table("pData.2.txt",header=T)
# read in dataset 1
pdata1=read.table("pData.1.txt",header=T)
#
# read in dataset 2
pdata2=read.table("pData.2.txt",header=T)
pdata2=read.table("pData.2.txt",header=T)
#
# read in calibration
pcalib2=read.table("pCalib.2.txt",header=T)
#
# read in check calibration
pcheck2=read.table("pCheck.2.txt",header=T)
#
# read in filter method blanks: di and di filtered (dif)
pDI2=read.table("pDI.2.txt",header=T)
pdata2=read.table("pData.2.txt",header=T)
#
# read in calibration
pcalib2=read.table("pCalib.2.txt",header=T)
#
# read in check calibration
pcheck2=read.table("pCheck.2.txt",header=T)
#
# read in filter method blanks: di and di filtered (dif)
pDI2=read.table("pDI.2.txt",header=T)
#
# linear model
p.lm2=lm(KnownPppm~HeightAu,data=pcalib2)
summary(p.lm2)
inter2=p.lm2$coeff[1]
slope2=p.lm2$coeff[2]
R2.2=summary(p.lm2)$r.squared #check this should be close to 1.00
#
# make prediction
p.predict2=predict(p.lm2)
#
# plot calibration points and model
plot(pcalib2$KnownPppm~pcalib2$HeightAu,pch=16)
lines(p.predict2~pcalib2$HeightAu,lwd=3,col="red")
#
# add check points
points(pcheck2$KnownPppm~pcheck2$HeightAu,pch=1)
legend("topleft",c("calibration","checks"),pch=c(16,1))
#
# recalc di conc's
pDI2$myPppm=pDI2$HeightAu*slope2+inter2
concPinFilter2=mean(pDI2$myPppm[pDI2$SampleID=="dif"]-pDI2$myPppm[pDI2$SampleID=="di"])
# if negative set to zero
if(concPinFilter2[1]<0) {
concPinFilter2=0
}
#
# recalc p conc's in data table
pdata2$myPppm=(pdata2$HeightAu*slope2+inter2)-concPinFilter2
View(pdata2)
B1.1=pdata2$myPppm[33]
B2.1=pdata2$myPppm[34]
pdata2$myPppmFix=pdata2$myPppm-mean(pdata2$myPppm[1],pdata2$myPppm[2])
#
# mark limits
for (i in 1:dim(pdata2)[1]){
if(pdata2$myPppmFix[i]<0) {
pdata2$myPppmFix[i]="NA"
}
}
#
# dilution?
dilutionFactor2=10 #i.e. 10 for 10x, 100 for 100x
for (i in 1:dim(pdata2)[1]){
if(pdata2$myPppmFix[i]!="NA") {
pdata2$myPppmFix[i]=as.numeric(pdata2$myPppmFix[i])*dilutionFactor2
}
}
write.table(pdata1, "pNewData.1.txt", sep="\t")
write.table(pdata2, "pNewData.2.txt", sep="\t")
pdata1=read.table("pData.1.txt",header=T)
#
# read in calibration
pcalib1=read.table("pCalib.1.txt",header=T)
#
# read in check calibration
pcheck1=read.table("pCheck.1.txt",header=T)
#
# read in filter method blanks: di and di filtered (dif)
pDI1=read.table("pDI.1.txt",header=T)
#
# linear model
p.lm1=lm(KnownPppm~HeightAu,data=pcalib1)
summary(p.lm1)
inter1=p.lm1$coeff[1]
slope1=p.lm1$coeff[2]
R2.1=summary(p.lm1)$r.squared #check this should be close to 1.00
#
# make prediction
p.predict1=predict(p.lm1)
#
# plot calibration points and model
plot(pcalib1$KnownPppm~pcalib1$HeightAu,pch=16)
lines(p.predict1~pcalib1$HeightAu,lwd=3,col="red")
#
# add check points
points(pcheck1$KnownPppm~pcheck1$HeightAu,pch=1)
legend("topleft",c("calibration","checks"),pch=c(16,1))
pDI1$myPppm=pDI1$HeightAu*slope1+inter1
concPinFilter1=mean(pDI1$myPppm[pDI1$SampleID=="dif"]-pDI1$myPppm[pDI1$SampleID=="di"])
# if negative set to zero
if(concPinFilter1[1]<0) {
concPinFilter1=0
}
#
# recalc p conc's in data table
pdata1$myPppm=(pdata1$HeightAu*slope1+inter1)-concPinFilter1
pdata1$myPppmFix=pdata1$myPppm-mean(B1.1,B2.1)
#
# mark limits
for (i in 1:dim(pdata1)[1]){
if(pdata1$myPppmFix[i]<0) {
pdata1$myPppmFix[i]="NA"
}
}
#
# dilution?
dilutionFactor1=10 #i.e. 10 for 10x, 100 for 100x
for (i in 1:dim(pdata1)[1]){
if(pdata1$myPppmFix[i]!="NA") {
pdata1$myPppmFix[i]=as.numeric(pdata1$myPppmFix[i])*dilutionFactor1
}
}
View(pdata1)
View(pdata1)
mean(B1.1,B2.1)
write.table(pdata1, "pNewData.1.txt", sep="\t")
setwd("C:\\Users\\Sheila\\Documents\\Cornell\\Research\\PhD!\\P_calibration_code")
#
# read in data
pdata=read.table("ptestData.txt",header=T)
#
# read in calibration
pcalib=read.table("ptestCalib.txt",header=T)
#
# read in check calibration
pcheck=read.table("ptestCheck.txt",header=T)
#
# read in filter method blanks: di and di filtered (dif)
pDI=read.table("ptestDI.txt",header=T)
#
# linear model
p.lm=lm(KnownPppm~HeightAu,data=pcalib)
summary(p.lm)
#
# save coeff's
inter=p.lm$coeff[1]
slope=p.lm$coeff[2]
R2=summary(p.lm)$r.squared #check this should be close to 1.00
#
# make prediction
p.predict=predict(p.lm)
#
# plot calibration points and model
plot(pcalib$KnownPppm~pcalib$HeightAu,pch=16)
lines(p.predict~pcalib$HeightAu,lwd=3,col="red")
#
# add check points
points(pcheck$KnownPppm~pcheck$HeightAu,pch=1)
legend("topleft",c("calibration","checks"),pch=c(16,1))
#
# recalc di conc's
pDI$myPppm=pDI$HeightAu*slope+inter
concPinFilter=mean(pDI$myPppm[pDI$SampleID=="dif"]-pDI$myPppm[pDI$SampleID=="di"])
# if negative set to zero
if(concPinFilter[1]<0) {
concPinFilter=0
}
#
# recalc p conc's in data table
pdata$myPppm=(pdata$HeightAu*slope+inter)-concPinFilter
pdata$myPppm[1],pdata$myPppm[2]
pdata$myPppm[1]
pdata$myPppmFix=pdata$myPppm-mean(pdata$myPppm[1],pdata$myPppm[2]) # change position of other method blanks if necessary
#
# mark limits
for (i in 1:dim(pdata)[1]){
if(pdata$myPppmFix[i]<0) {
pdata$myPppmFix[i]="NA"
}
}
#
# dilution?
dilutionFactor=10 #i.e. 10 for 10x, 100 for 100x
for (i in 1:dim(pdata)[1]){
if(pdata$myPppmFix[i]!="NA") {
pdata$myPppmFix[i]=as.numeric(pdata$myPppmFix[i])*dilutionFactor
}
}
setwd("C:\\Users\\Sheila\\Documents\\Cornell\\Research\\PhD!\\P_calibration_code")
#
# read in data
pdata=read.table("ptestData.txt",header=T)
#
# read in calibration
pcalib=read.table("ptestCalib.txt",header=T)
#
# read in check calibration
pcheck=read.table("ptestCheck.txt",header=T)
#
# read in filter method blanks: di and di filtered (dif)
pDI=read.table("ptestDI.txt",header=T)
#
# linear model
p.lm=lm(KnownPppm~HeightAu,data=pcalib)
summary(p.lm)
#
# save coeff's
inter=p.lm$coeff[1]
slope=p.lm$coeff[2]
R2=summary(p.lm)$r.squared #check this should be close to 1.00
#
# make prediction
p.predict=predict(p.lm)
#
# plot calibration points and model
plot(pcalib$KnownPppm~pcalib$HeightAu,pch=16)
lines(p.predict~pcalib$HeightAu,lwd=3,col="red")
#
# add check points
points(pcheck$KnownPppm~pcheck$HeightAu,pch=1)
legend("topleft",c("calibration","checks"),pch=c(16,1))
#
# recalc di conc's
pDI$myPppm=pDI$HeightAu*slope+inter
concPinFilter=mean(pDI$myPppm[pDI$SampleID=="dif"]-pDI$myPppm[pDI$SampleID=="di"])
# if negative set to zero
if(concPinFilter[1]<0) {
concPinFilter=0
}
#
# recalc p conc's in data table
pdata$myPppm=(pdata$HeightAu*slope+inter)-concPinFilter
pdata$myPppm[1]
pdata$myPppm[2]
for (i in 1:dim(pdata)[1]){
if(pdata$myPppmFix[i]<0) {
pdata$myPppmFix[i]="NA"
}
}
#
# dilution?
dilutionFactor=10 #i.e. 10 for 10x, 100 for 100x
for (i in 1:dim(pdata)[1]){
if(pdata$myPppmFix[i]!="NA") {
pdata$myPppmFix[i]=as.numeric(pdata$myPppmFix[i])*dilutionFactor
}
}
View(pdata)
View(pdata)
pdata$myPppmFix=pdata$myPppm-mean(pdata$myPppm[1],pdata$myPppm[2]) # change position of other method blanks if necessary
#
# mark limits
for (i in 1:dim(pdata)[1]){
if(pdata$myPppmFix[i]<0) {
pdata$myPppmFix[i]="NA"
}
}
View(pdata)
View(pdata)
dilutionFactor=10 #i.e. 10 for 10x, 100 for 100x
for (i in 1:dim(pdata)[1]){
if(pdata$myPppmFix[i]!="NA") {
pdata$myPppmFix[i]=as.numeric(pdata$myPppmFix[i])*dilutionFactor
}
}
View(pdata)
write.table(pdata, "ptestNewData.txt", sep="\t")
setwd("C:\\Users\\Sheila\\Documents\\Cornell\\Research\\PhD!\\P_calibration_code")
#
# read in data
pdata=read.table("ptestData.txt",header=T)
#
# read in calibration
pcalib=read.table("ptestCalib.txt",header=T)
#
# read in check calibration
pcheck=read.table("ptestCheck.txt",header=T)
#
# read in filter method blanks: di and di filtered (dif)
pDI=read.table("ptestDI.txt",header=T)
#
# linear model
p.lm=lm(KnownPppm~HeightAu,data=pcalib)
summary(p.lm)
#
pDI=read.table("ptestDI.txt",header=T)
setwd("C:\\Users\\Sheila\\Documents\\Cornell\\Research\\PhD!\\P_calibration_code")
#
# read in data
pdata=read.table("ptestData.txt",header=T)
#
# read in calibration
pcalib=read.table("ptestCalib.txt",header=T)
#
# read in check calibration
pcheck=read.table("ptestCheck.txt",header=T)
#
# read in filter method blanks: di and di filtered (dif)
pDI=read.table("ptestDI.txt",header=T)
View(pDI)
p.lm=lm(KnownPppm~HeightAu,data=pcalib)
summary(p.lm)
inter=p.lm$coeff[1]
slope=p.lm$coeff[2]
R2=summary(p.lm)$r.squared #check this should be close to 1.00
p.predict=predict(p.lm)
#
# plot calibration points and model
plot(pcalib$KnownPppm~pcalib$HeightAu,pch=16)
lines(p.predict~pcalib$HeightAu,lwd=3,col="red")
#
# add check points just to make sure whole run went well
points(pcheck$KnownPppm~pcheck$HeightAu,pch=1)
legend("topleft",c("calibration","checks"),pch=c(16,1))
pDI$myPppm=pDI$HeightAu*slope+inter
# calculate concentration of P added from filtering
concPinFilter=mean(pDI$myPppm[pDI$SampleID=="dif"]-pDI$myPppm[pDI$SampleID=="di"])
# if negative set to zero to avoid errors later on
if(concPinFilter[1]<0) {
concPinFilter=0
}
pdata$myPppm=(pdata$HeightAu*slope+inter)-concPinFilter
metblanks=c(pdata$myPppm[1],pdata$myPppm[2])
pdata$myPppmFix=pdata$myPppm-mean(metblanks) # change position of other method blanks if necessary
#
# mark limits
for (i in 1:dim(pdata)[1]){
if(pdata$myPppmFix[i]<0) {
pdata$myPppmFix[i]="NA"
}
}
#
# if you diluted your sample
dilutionFactor=10 #i.e. 10 for 10x, 100 for 100x
for (i in 1:dim(pdata)[1]){
if(pdata$myPppmFix[i]!="NA") {
pdata$myPppmFix[i]=as.numeric(pdata$myPppmFix[i])*dilutionFactor
}
}
View(pdata)
setwd("C:\\Users\\Sheila\\Documents\\Cornell\\Research\\PhD!\\P_calibration_code")
#
# read in data
pdata=read.table("ptestData.txt",header=T)
#
# read in calibration
pcalib=read.table("ptestCalib.txt",header=T)
#
# read in check calibration
pcheck=read.table("ptestCheck.txt",header=T)
#
# read in filter method blanks: di and di filtered (dif)
pDI=read.table("ptestDI.txt",header=T)
#
# read in other method blanks (if necessary)
pblanks=read.table("ptestBlanks.txt",header=T)
View(pblanks)
View(pdata)
View(pdata)
p.lm=lm(KnownPppm~HeightAu,data=pcalib)
summary(p.lm)
#
# save coeff's
inter=p.lm$coeff[1]
slope=p.lm$coeff[2]
R2=summary(p.lm)$r.squared #check this should be close to 1.00
#
# make prediction
p.predict=predict(p.lm)
#
# plot calibration points and model
plot(pcalib$KnownPppm~pcalib$HeightAu,pch=16)
lines(p.predict~pcalib$HeightAu,lwd=3,col="red")
#
# add check points
points(pcheck$KnownPppm~pcheck$HeightAu,pch=1)
legend("topleft",c("calibration","checks"),pch=c(16,1))
#
# recalc di conc's
pDI$myPppm=pDI$HeightAu*slope+inter
concPinFilter=mean(pDI$myPppm[pDI$SampleID=="dif"]-pDI$myPppm[pDI$SampleID=="di"])
# if negative set to zero
if(concPinFilter[1]<0) {
concPinFilter=0
}
pdata$myPppm=(pdata$HeightAu*slope+inter)-concPinFilter
dilutionFactor=10 #i.e. 10 for 10x, 100 for 100x
for (i in 1:dim(pdata)[1]){
if(pdata$myPppmFix[i]!="NA") {
pdata$myPppmFix[i]=as.numeric(pdata$myPppmFix[i])*dilutionFactor
}
}
View(pdata)
dilutionFactor=10 #i.e. 10 for 10x, 100 for 100x
for (i in 1:dim(pdata)[1]){
if(pdata$myPppmFix[i]!="NA") {
pdata$myPppmFix[i]=as.numeric(pdata$myPppm[i])*dilutionFactor
}
}
dilutionFactor=10 #i.e. 10 for 10x, 100 for 100x
for (i in 1:dim(pdata)[1]){
if(pdata$myPppm[i]!="NA") {
pdata$myPppmFix[i]=as.numeric(pdata$myPppm[i])*dilutionFactor
}
}
View(pdata)
write.table(pdata, "ptestNewData.txt", sep="\t")
setwd("C:\\Users\\Sheila\\Documents\\Cornell\\Research\\PhD!\\P_calibration_code")
#
# read in data
pdata=read.table("ptestData.txt",header=T)
#
# read in calibration
pcalib=read.table("ptestCalib.txt",header=T)
#
# read in check calibration
pcheck=read.table("ptestCheck.txt",header=T)
#
# read in filter method blanks: di and di filtered (dif)
pDI=read.table("ptestDI.txt",header=T)
#
# read in other method blanks (if necessary)
pblanks=read.table("ptestBlanks.txt",header=T)
#
# linear model
p.lm=lm(KnownPppm~HeightAu,data=pcalib)
summary(p.lm)
#
# save coeff's
inter=p.lm$coeff[1]
slope=p.lm$coeff[2]
R2=summary(p.lm)$r.squared #check this should be close to 1.00
#
# make prediction
p.predict=predict(p.lm)
#
# plot calibration points and model
plot(pcalib$KnownPppm~pcalib$HeightAu,pch=16)
lines(p.predict~pcalib$HeightAu,lwd=3,col="red")
#
# add check points
points(pcheck$KnownPppm~pcheck$HeightAu,pch=1)
legend("topleft",c("calibration","checks"),pch=c(16,1))
#
# recalc di conc's
pDI$myPppm=pDI$HeightAu*slope+inter
concPinFilter=mean(pDI$myPppm[pDI$SampleID=="dif"]-pDI$myPppm[pDI$SampleID=="di"])
# if negative set to zero
if(concPinFilter[1]<0) {
concPinFilter=0
}
#
# recalc p conc's in data table
pdata$myPppm=(pdata$HeightAu*slope+inter)-concPinFilter
#
# -----------------------------------------------------
# OPTIONAL CODE
#
# For other method blanks
# if you have other method blanks
pblanks$myPppm=pblanks$HeightAu*slope+inter
pdata$myPppmFix=pdata$myPppm-mean(pblanks$myPppm) #subtract method blanks
#
# mark limits
for (i in 1:dim(pdata)[1]){
if(pdata$myPppmFix[i]<0) {
pdata$myPppmFix[i]="NA"
}
}
#
# For dilutions
dilutionFactor=10 #i.e. 10 for 10x, 100 for 100x
for (i in 1:dim(pdata)[1]){
if(pdata$myPppm[i]!="NA") {
pdata$myPppmFix[i]=as.numeric(pdata$myPppm[i])*dilutionFactor
}
}
#
# -----------------------------------------------------
#
# export newly calculated data
write.table(pdata, "ptestNewData.txt", sep="\t")
